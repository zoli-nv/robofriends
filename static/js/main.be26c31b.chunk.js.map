{"version":3,"sources":["reducers.js","components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["intialStateSearchField","searchField","intialStateRobots","isPending","robots","error","SearchBox","props","className","type","placeholder","onChange","searchChange","Card","id","name","email","alt","src","CardList","map","user","key","Scroll","style","overflow","border","height","children","ErrorBoundry","state","hasError","info","console","log","componentStack","this","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be26c31b.chunk.js","sourcesContent":["import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED \r\n} from './constants.js';\r\n\r\nconst intialStateSearchField = {\r\n  searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearchField, action={}) => {\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, {searchField: action.payload});\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst intialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action={}) => {\r\n  switch(action.type){\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, {isPending: true});\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {isPending:false, robots: action.payload})\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {isPending:false, error: action.payload})\r\n    default: \r\n      return state;\r\n  }\r\n}","import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n\r\n    return(\r\n        <div className=\"pa2\">\r\n        <input className=\"pa3 ba b-green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange={props.searchChange}/>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    const {id, name, email} = props;\r\n\r\n    return(\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n        <div>\r\n          <h2>{name}</h2>\r\n          <p>{email}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = (props) => {\r\n\r\n    return(\r\n        <div>\r\n          {\r\n            props.robots.map((user) => {\r\n              return (\r\n                    <Card key={user.id}\r\n                        id={user.id} \r\n                        name={user.name} \r\n                        email={user.email} />\r\n                      );\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n      <div style={{overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n        {props.children}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromError(error){\r\n    return { hasError: true};\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    console.log(info.componentStack);\r\n  }\r\n\r\n  render(){\r\n      if(this.state.hasError){\r\n        return <h1>Uppss... error</h1>\r\n      }\r\n\r\n      return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, executesRequestRobots } from '../actions'\r\nimport SearchBox from '../components/SearchBox';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css'\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\n\r\nconst mapDispatcherToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(executesRequestRobots())\r\n  }\r\n}\r\n\r\nclass App extends React.Component{\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render(){\r\n     const { searchField, onSearchChange, robots, isPending, error } =  this.props;\r\n\r\n    const filteredRobots = robots.filter((robot) => {\r\n          return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      });\r\n\r\n    return isPending ?\r\n              <h1> Loading... </h1>\r\n          : (\r\n            <div className=\"tc\">\r\n              <h1 className=\"f1\">RoboFriends</h1>\r\n              <SearchBox searchChange={onSearchChange}/>\r\n              <Scroll>\r\n                <ErrorBoundry>\r\n                  <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n              </Scroll>\r\n            </div>\r\n          );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatcherToProps)(App);","import { CHANGE_SEARCH_FIELD,\r\n         REQUEST_ROBOTS_PENDING,\r\n         REQUEST_ROBOTS_SUCCESS,\r\n         REQUEST_ROBOTS_FAILED \r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const executesRequestRobots = () => (dispatch) => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING\r\n  });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => dispatch({\r\n                      type: REQUEST_ROBOTS_SUCCESS,\r\n                      payload: users\r\n                    }))\r\n    .catch(error => dispatch({\r\n                      type: REQUEST_ROBOTS_FAILED,\r\n                      payload: error\r\n                    }));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers'\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\n\nconst store = createStore(rootReducer, \n                    applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}